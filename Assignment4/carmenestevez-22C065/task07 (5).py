# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/FacultadInformatica-LinkedData/Curso2023-2024-DataScience/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

#for r in g.query(q1):
#  print(r)
from rdflib.plugins.sparql import prepareQuery
#VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns=Namespace("http://somewhere#")

q1 = prepareQuery('''
    SELECT ?Subclass WHERE {

    ?Subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = {"rdfs":RDFS,"ns":ns}
)
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
q2 = prepareQuery('''
  SELECT
    ?Individual
  WHERE {
    {
      ?Individual rdf:type ns:Person.
    } UNION {
      ?Subclase rdfs:subClassOf ns:Person.
      ?Individual rdf:type ?Subclase
    }
  }
  ''',
  initNs = { "rdfs": RDFS,"rdf": RDF, "ns": ns}
)

for i in g.query(q2):
  print(i)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
#VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns=Namespace("http://somewhere#")
#for s, p, o in g:
#  print(s,p,o)

q3 = prepareQuery('''
  SELECT DISTINCT?Individual ?Property ?Class
  WHERE {
    {
      ?Individual rdf:type ns:Person.
    } UNION {
      ?Individual rdf:type ns:Animal.
    }
    ?Individual ?Property ?Class.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns":ns, "rdf":RDF}
)

for p in g.query(q3):
  print(p)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
FOAF=Namespace("http://xmlns.com/foaf/0.1")
q4= prepareQuery('''
  SELECT DISTINCT ?Person
  WHERE {
    {
    ?Person rdf:type ns:Person.
    } UNION {
    ?Sublcass rdfs:subClassOf ns:Person.
      }
    ?Person <http://xmlns.com/foaf/0.1/knows> <http://somewhere#RockySmith>
    }

  ''',
  initNs = { "FOAF":FOAF,"rdfs": RDFS, "ns":ns, "rdf":RDF}
)

for n in g.query(q4):
  print(n)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
FOAF=Namespace("http://xmlns.com/foaf/0.1")
#for s, p, o in g:
#  print(s,p,o)
q5 = prepareQuery('''
  SELECT DISTINCT ?Person
  WHERE {
    ?Person <http://xmlns.com/foaf/0.1/knows>  ?KnownPerson1.
    ?Person <http://xmlns.com/foaf/0.1/knows>  ?KnownPerson2.
    FILTER (?KnownPerson1 != ?KnownPerson2)
  }
''',
  initNs={"FOAF": FOAF, "ns": ns, "rdf": RDF}
)

for e in g.query(q5):
  print(e)