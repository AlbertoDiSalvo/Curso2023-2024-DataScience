# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNoLywHkzxAhUWq9LQFOpUVnW5-3kKK7

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

ns=Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE{
    ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = {"rdfs" : RDFS, "ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q1 = prepareQuery('''
  SELECT ?Subject WHERE{
    ?Subject RDF:type ns:Person.
  }
  ''',
  initNs = {"RDF" : RDF, "ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

q1 = prepareQuery('''
  SELECT ?Subject ?clase ?propiedad ?valor
  WHERE{
    ?Subject RDF:type ?clase.
    ?Subject ?propiedad ?valor.
    FILTER (?clase = ns:Animal || ?clase = ns:Person)
  }
  ''',
  initNs = {"RDF" : RDF, "ns": ns}
)

for r in g.query(q1):
  print(r.Subject, r.propiedad, r.clase, r.valor)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

foaf=Namespace("http://xmlns.com/foaf/0.1/")

q1 = prepareQuery('''
  SELECT ?Subject
  WHERE{
    ?Subject foaf:knows ns:RockySmith.
    ?Subject RDF:type ns:Person.
  }
  ''',
  initNs = {"RDF" : RDF, "ns": ns, "foaf": foaf}
)

for r in g.query(q1):
  print(r.Subject)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

foaf=Namespace("http://xmlns.com/foaf/0.1/")

q1 = prepareQuery('''
  SELECT ?Subject ?persona
  WHERE{
    ?Subject foaf:knows ?persona.
  }
  GROUP BY ?Subject
  HAVING (COUNT(DISTINCT ?persona) >= 2)
  ''',
  initNs = {"foaf": foaf}
)

for r in g.query(q1):
  print(r)

foaf=Namespace("http://xmlns.com/foaf/0.1/")

q1 = prepareQuery('''
  SELECT ?Subject ?persona1 ?persona2
  WHERE{
    ?Subject foaf:knows ?persona1.
    ?Subject foaf:knows ?persona2.
    FILTER(?persona1 != ?persona2)
  }
  ''',
  initNs = {"foaf": foaf}
)

for r in g.query(q1):
  print(r.Subject, r.persona1, r.persona2)