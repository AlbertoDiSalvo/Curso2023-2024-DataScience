# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o_P1204rcxOqpJvcnVFZ5UM6wCCrSZ40

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
rdfs = Namespace('http://www.w3.org/2000/01/rdf-schema#')

query = prepareQuery(
    """
    SELECT ?subClass
    WHERE {
        ?subClass rdfs:subClassOf ns:LivingThing
    }
    """,
    initNs={"rdfs": rdfs, 'ns':ns},
)

# Execute the query and print the results
for row in g.query(query):
    print(row.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
ns = Namespace("http://somewhere#")
rdfs = Namespace('http://www.w3.org/2000/01/rdf-schema#')
q1 = prepareQuery(
    """
    SELECT ?individual ?subclass
    WHERE {
        ?individual a ?subclass.
        VALUES ?subclass {<http://somewhere#Researcher>
        <http://somewhere#Professor>}
    }
    """,
    initNs={"rdfs": rdfs}
)
#AÃ±ado los individuos que son de tipo professor o researcher(ya que estos
#son subclase de Person)
group = set()
for row in g.query(q1):
    group.add(row.individual)

q2 = prepareQuery(
    '''
    SELECT ?individual2
    WHERE {
      ?individual2 a ns:Person
    }
    ''',
    initNs={"ns": ns}
)
for row in g.query(q2):
  group.add(row.individual2)

# Visualize the results
for individual in group:
  print(individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
query = prepareQuery(
    """
    SELECT ?individual ?properties
    WHERE {
        ?individual ?p ?x.
        FILTER (?x = <http://somewhere#Animal> || ?x = <http://somewhere#Person>
        && ?p != <http://www.w3.org/2000/01/rdf-schema#subClassOf> ).
        ?individual ?properties ?y
    }
    """,
    initNs={}
)
# Visualize the results
for row in g.query(query):
    print(row.individual,row.properties)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib import FOAF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
query = prepareQuery(
    """
    SELECT ?name
    WHERE {
        ?individual foaf:knows ns:RockySmith.
        ?individual <http://www.w3.org/2001/vcard-rdf/3.0/Given> ?name

    }
    """,
    initNs={'ns':ns, 'vcard': vcard,'foaf':FOAF}
)
# Visualize the results
for row in g.query(query):
    print(row.name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
query = prepareQuery(
    '''
    SELECT ?entity
    WHERE {
        ?entity foaf:knows ?known .
    }
    GROUP BY ?entity
    HAVING (COUNT(?known) >= 2)
    ''',
    initNs={'foaf':FOAF}
)
# Visualize the results
for row in g.query(query):
    print(row.entity)