# -*- coding: utf-8 -*-
"""trask07corr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VsYKn9L_0kjon4D8PcATQMtzOuQ-bK3

# **Task07.ipynb**

Daniel Llopis, 21C033

Primero leemos el grafo
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")

"""7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL"""

# TO DO
q1 = """
    SELECT ?subclass
    WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing .
    }
"""
# Visualize the results

for r in g.query(q1):
  print(r)

""" 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)"""

# TO DO
q2 = """
    SELECT ?individual
    WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person .
    }
"""
# Visualize the results
for r in g.query(q2):
    print(r)

"""7.3 List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person"""

rdf = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
q3 = prepareQuery('''
    SELECT ?individual ?property ?x
    WHERE {
      {
        ?individual rdf:type ns:LivingThing.
        ?individual ?property ?x
      } UNION {
        ?individual rdf:type ?y.
        ?individual ?property ?x.
        ?y rdfs:subClassOf ns:LivingThing
      }
    }
    ''',
    initNs = {"rdfs": rdfs, "rdf": rdf, "ns": ns}
)

for r in g.query(q3):
  print(r)

""" 7.4: List the name of the persons who know Rocky"""

# TO DO
q4 = """
    SELECT ?person
    WHERE {
        ?person foaf:knows ns:RockySmith .
    }
"""

# Visualize the results
for r in g.query(q4):
    print(r.person)

"""7.5: List the entities who know at least two other entities in the graph"""

# TO DO
q5 = """
    SELECT ?person
    WHERE {
        ?person foaf:knows ?other1 .
        ?person foaf:knows ?other2 .
        FILTER (?other1 != ?other2)
    }
"""

# Visualize the results
for r in g.query(q5):
    print(r.person)