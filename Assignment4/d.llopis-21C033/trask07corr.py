# -*- coding: utf-8 -*-
"""trask07corr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VsYKn9L_0kjon4D8PcATQMtzOuQ-bK3

# **Task07.ipynb**

Daniel Llopis, 21C033

Primero leemos el grafo
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"


from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

ns = Namespace("http://somewhere#")

"""7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

livingThing_query = prepareQuery('''
SELECT ?subClase
WHERE {
    ?subClase rdfs:subClassOf ns:LivingThing
}
''',
initNs = { "rdfs": RDFS, "ns": ns}
)
# Visualize the results

for r in g.query(livingThing_query):
  print(r.subClase)


# Create a set to store the subclasses
subclasses = set()

# Iterate through the triples in the graph
for subject, predicate, object_ in g.triples((None, RDF.type, RDFS.Class)):
    for sub, _, sup in g.triples((None, RDFS.subClassOf, subject)):
        if sup == ns.LivingThing:
            subclasses.add(sub)

# Print the subclasses of LivingThing
for subclass in subclasses:
    print(subclass)

""" 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)"""

# TO DO

person_query = prepareQuery('''
SELECT ?individual
WHERE {
    ?individual rdf:type/rdfs:subClassOf* ns:Person .
}
''',
initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns}
)

# Visualize the results


for r in g.query(person_query):
  print(r.individual)


# Create a set to store the individuals of "Person" and its subclasses
individuals = set()

# Create a set of classes to include "Person" and its subclasses
classes_to_include = {ns.Person}

# Find subclasses of "Person" and add them to the set of classes to include
for subject, _, object_ in g.triples((None, RDFS.subClassOf, ns.Person)):
    classes_to_include.add(subject)

# Iterate through the triples in the graph
for subject, predicate, object_ in g.triples((None, RDF.type, None)):
    if object_ in classes_to_include:
        individuals.add(subject)

# Print the individuals of "Person" and its subclasses
for individual in individuals:
    print(individual)

"""7.3 List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person"""

# TO DO

# Create a set to store the individuals of "Person" or "Animal"
individuals = set()

# Create a set of classes to include "Person" and "Animal"
classes_to_include = {ns.Person, ns.Animal}

for subject, predicate, object_ in g.triples((None, RDF.type, None)):
    if object_ in classes_to_include:
        individuals.add(subject)

for individual in individuals:
    print("Individual:", individual)
    for s, p, o in g.triples((individual, None, None)):
        print(f" Property: {p}, Value: {o}")

query_3 = prepareQuery('''
SELECT ?individual ?property ?value
WHERE {
     ?individual rdf:type/rdfs:subClassOf* ?class .
     FILTER (?class = ns:Person || ?class = ns:Animal)
     ?individual ?property ?value .
}
''',
initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns}
)

# Visualize the results

for r in g.query(query_3):
  print(r.individual, r.property, r.value)

""" 7.4: List the name of the persons who know Rocky"""

q4 = """
    SELECT ?person
    WHERE {
        ?person foaf:knows ns:RockySmith .
    }
"""

# Visualize the results
for r in g.query(q4):
    print(r.person)

"""7.5: List the entities who know at least two other entities in the graph"""

# TO DO

query_5 = prepareQuery('''
SELECT ?entity ?relatedEntity
WHERE {
      ?entity foaf:knows ?relatedEntity .

}
GROUP BY ?entity
HAVING (COUNT(DISTINCT ?relatedEntity) >= 2)

''',
initNs = { "foaf": FOAF , "ns" : ns, "vcard": VCARD}
)

# Visualize the results

for r in g.query(query_5):
     print(r.entity)