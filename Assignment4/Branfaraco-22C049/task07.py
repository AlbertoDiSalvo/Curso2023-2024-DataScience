# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15PO-cbMfcZpar3LNK3mHEeGAKlHKTwwN

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject RDFS.subClassOf ns.LivingThing.
  }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery('''
  SELECT ?Subject WHERE {
  { ?person rdf:type ?tipo.
    ?tipo rdf:subClassOf foaf:Person.}
  UNION { ?person rdf:type foaf:Person.}

  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?person ?pers_properties ?animal ?animal_properties WHERE {
  ?person rdf:type foaf:Person.
  ?animal rdf:type foaf:Animal.
  ?person ?pers_properties ?predicate.
  ?animal ?animal_properties ?predicate.

  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q3):
  print(r)
# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
q3 = prepareQuery('''
  SELECT ?persons WHERE {
  ?persons rdf:type foaf:Person.
  ?persons foaf:knows ns.Rocky

  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q3):
  print(r)
# Visualize the results

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q4 = prepareQuery('''
  SELECT DISTINCT ?entity
    WHERE {
        ?entity ns:knows ?entity1.
        ?entity ns:knows ?entity2.
        FILTER (?entity1 != ?entity2)
    }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q4):
  print(r)
# Visualize the results

# Visualize the results



