**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO

ns = Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?subclass
  WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)
# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT ?sujeto
  WHERE {
    ?sujeto rdfs:subClassOf* ns:Person.
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

# Visualize the results
for r in g.query(q2):
  print(r.sujeto)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery("""
SELECT ?individual ?property ?value ?class
WHERE {
    ?individual a ?class .
    FILTER (?class = ns:Person || ?class = ns:Animal)
    ?individual ?property ?value .
}
""", initNs={"ns": ns})


for r in g.query(q3):
    print("Individual:", r.individual)
    print("Property:", r.property)
    print("Value:", r.value)
    print("Class:", r["class"])
    print("\n")

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
q4 = prepareQuery('''
  SELECT ?nombre
  WHERE {
    ?person a ns:Person;
              ns:knows ?otraPersona.
    ?otraPersona ns:Given "Rocky".
    ?person ns:Given ?nombre .
  }
  ''', initNs={"ns":ns})

# Visualize the results

for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery("""
    SELECT ?sujeto ?conoceSujetos
    WHERE {
        ?sujeto a ?class .
        FILTER(?class = ns:Person || ?class = ns:Animal)
        ?entity ns:knows ?knowsSujeto1.
        ?entity ns:knows ?knowsSujeto2.
        FILTER(str(?knowsSujeto1) < str(?knowsSujeto2))
        BIND(CONCAT(str(?knowsSujeto2), ", ", str(?knowsSujeto2)) AS ?conoceSujetos)
    }
""", initNs={"ns":ns})

# Visualize the results
for r in g.query(q5):
  print(r.sujeto)
